TITLE: E-MOD321 Basic Python coding for subsurface applications 
AUTHOR: Aksel Hiorth
DATE: today


# #if FORMAT in ("ipynb")
!bc pycod
import numpy as np
import scipy as sp
import pandas as pd
import matplotlib.pyplot as plt
import pathlib as pt
!ec
# # endif
__Learning objectives.__
* Create an environment using conda and install required packages
* Use Pandas to combine and manipulate data from different input, Excel and comma separated values (CSV),  files.
* Wrap code in functions to reuse them
* Visualize data using "`matplotlib`":"https://matplotlib.org" and the "Pandas library":"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html".  

TOC: on

!split
<% ex_id = 0 %>
<% ex_id += 1 %>

======= Exercise ${ex_id}: Matplotlib visualization  =======
In `jotun_data.py` in the `data` folder "official production data":" https://factpages.sodir.no/en/field/PageView/All/43604" are available as lists. You can import them as 
!bc pycod
import sys
sys.path.append('../data/')# alternatively put jotun_data.py in your folder
from jotun_data import years, months, oil_gross, gas_gross, oe_gross, wat_prod
!ec

__Question:__
* Use matplotlib to plot oil equivalents, `oe_gross` vs the `years` data. Try to make the plot as similar as possible to figure ref{p1:jotun}.

FIGURE: [fig-project1/jotun.png, width=400 frac=1.0] Jotun production data. label{p1:jotun}

!bc pycod
#answer
!ec

# #ifdef SOLUTIONS
!bc pycod
import matplotlib.pyplot as plt
plt.plot(years,oe_gross,'-o',c='g',label='Oil Equivalents')
plt.xlabel('Years')
plt.ylabel('Produced volumes [10$^6$ Sm$^3$]')
plt.title('Jotun')
plt.grid()
plt.legend()
!ec
# #endif

<% ex_id += 1 %>
======= Exercise ${ex_id}: Loop over data  =======
Oil equivalents are simply the sum of oil volumes and gas volumes. (Or to be more specific: The convention used when comparing gas volumes with oil volumes is to divide the gas volumes by 1000, see "conversion factors":"https://www.sodir.no/en/about-us/use-of-content/conversion-table/". However, we do not need to do anything here because the unit of the gas volumes in `jotun_data.py` is $10^9$ Sm$^3$ and the oil volumes in $10^6$ Sm$^3$.)

Thus, to calculate oil equivalents from our lists that contain oil and gas volumes you just have to add them together.

__Question 1:__ Use vanilla Python to loop over `oil_gross` and `gas_gross`, create a new *list*, which holds your calculated oil equivalents volumes. Note: You can compare with `oe_gross` to check if your calculations are correct.

__Question 2:__ Convert your lists to `numpy.arrays`, by doing e.g. `np.array(oil_gross)`. Perform the same calculation as in Question 1, but this time using Numpy (and no loop).

!bc pycod
#answer
!ec


<% ex_id += 1 %>
======= Exercise ${ex_id}: Boolean masking  =======

__Question 1:__ Use vanilla Python to create a loop and sum up all oil equivalents that was produced for the year 2000. (If you did everything correct you should get 7.529206 10$^6$Sm$^3$ for the year 2000.)

Create to new `numpy.arrays`, by
!bc pycod
years_np=np.array(years)
oe_np=np.array(oe_gross)
!ec

__Question 2:__ Show how you can use Boolean masking to pick out only produced oil equivalents for the year 2000, without using a loop. Use `np.sum()` to sum all the volumes. 

__Question 3:__ Use `np.unique()` to create a unique `np.array()` of years. Loop over this array and use Boolean masking to create a new list (or `np.array()`) that holds the total produced oil equivalents for that year.

__Question 4:__ Use the results in the previous question to create a bar plot and compare with figure ref{p1:jotun2}

FIGURE: [fig-project1/jotun_oe.png, width=400 frac=1.0] Jotun production data. label{p1:jotun2}



# #ifdef SOLUTIONS
!bc pycod
years_np=np.array(years)
oe_np=np.array(oe_gross)
y_un=np.unique(years_np)
oe_tot=[]
for y in y_un:
    oe_tot.append(np.sum(oe_np[years_np==y]))

plt.bar(y_un,oe_tot,label='Oil Equivalents')
plt.xlabel('Years')
plt.ylabel('Produced volumes [10$^6$ Sm$^3$] per year')
plt.title('Jotun')
plt.grid()
plt.legend()
!ec
# #endif

<% ex_id += 1 %>
======= Exercise ${ex_id}: Dictionaries and Pandas DataFrame =======

__Question 1:__ Create a dictionary that holds all the Jotun data you imported in Exercise 1. Choose suitable key names.

__Question 2:__ Create a loop over all the keys in the dictionary and show how you can print out the keys and the values in the dictionary.

__Question 3:__ Create a DataFrame from your dictionary. Show how we can use `DataFrame.groupby().sum()` to find production of oil, gas, water, and oil equivalents per year. 

!bc pycod
#answer
!ec


# #ifdef SOLUTIONS
!bc pypro
my_dict={'year':years,'month':months,'oil':oil_gross,
         'gas':gas_gross,'wat':wat_prod,'oe':oe_gross}
for key in my_dict:
    print(key)
    print(my_dict[key])

df=pd.DataFrame(my_dict)
df.groupby('year').sum()
!ec
# #endif

<% ex_id += 1 %>
======= Exercise ${ex_id}: Extract data using a function  =======

__Question:__ Create a function from the following code. The function should take as argument the field name and return a DataFrame with field data. Include a docstring in the function.
!bc pycod
df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
df=df_prod[df_prod['Field (Discovery)'] == 'JOTUN']
!ec

!bc pycod
def get_data(field):
    # write code here ..
    return #...
!ec

__Optional:__ Make the function more robust, by allowing for case insensitive names and/or give a warning if no data was extracted for the field.


!bc pycod
#answer
!ec


# #ifdef SOLUTIONS
!bc pycod
def get_data(field):
        """
        Extracts data for a specific field
        """
	field = field.upper() #optional
	df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
        df= df_prod[df_prod['Field (Discovery)'] == field]
	if df.empty: #optional
	   print('No data for ', field)
        return df
# example of use
df=get_data('JOTUN')
# #endif

<% ex_id += 1 %>
======= Exercise ${ex_id}: Create a function for plotting data  =======

__Question 1:__ Create a function that takes as argument the name of a field, and plots oil equivalent production vs time. Hint: you should use the function you wrote in the previous exercise to extract the data. 

__Question 2:__ Extend the function such that if no data is extracted from the field, write a warning and do not make the plot. (Note: you can use `DataFrame.empty()` to check if the DataFrame contains data.) 

__Optional:__ Extend the function such that it can take in a list of values (e.g. gas, oil, etc.) that should be plotted in the same plot.

!bc pycod
#answer
!ec


<% ex_id += 1 %>
======= Exercise ${ex_id}: Write data to files  =======

__Question 1:__ Explain what the following code does. By adding comment lines to each line of the following code.

!bc pypro
field='JOTUN' # com1
#--------- start --------
df=get_data(field) # com2
data_folder=pt.Path('tmp_data') # com3 
data_folder.mkdir(exist_ok=True)# etc.
new_name=str.replace(field,'/','')
new_path=data_folder / new_name
new_path.mkdir(exist_ok=True)
df2=df[df[df.columns[0]]==field]
df2.to_excel(new_path/'production_data.xlsx',index=False)
#-------- stop ----------
!ec

__Question 2:__ Create a function from the code between `-- start --` and `-- stop --`. It should take as argument the field name.

!bc pycod
def write_data(field):
    # ....
    return #optional 
!ec


__Question 3:__ If your Excel file is open in another program, the command `df2.to_excel(new_path/'production_data.xlsx',index=False)`, will fail. Use the `try:` and `except:` commands to try and write the Excel file, and if this fails, give the user a warning.

__Optional:__ Extend the previous function and introduce a default argument, representing `tmp_data` so that the user can specify the directory name.

!bc pycod
#answer
!ec

# #ifdef
!bc pycod
def write_data(field):
    df=get_data(field)
    data_folder=pt.Path('tmp_data')
    data_folder.mkdir(exist_ok=True)
    new_name=str.replace(field,'/','')
    new_path=data_folder / new_name
    new_path.mkdir(exist_ok=True)
    df2=df[df[df.columns[0]]==field]
    try:
        df2.to_excel(new_path/'production_data.xlsx',index=False)
    except:
        print('Failed to save data, for field ')
    return 
!ec
# #endif

<% ex_id += 1 %>
======= Exercise ${ex_id}: Loop over all fields  =======
The following code writes all field data to separate Excel files.
!bc pypro
df=pd.read_excel('../data/field_production_gross_monthly.xlsx')
fields=df[df.columns[0]].unique() #skip duplicates
data_folder=pt.Path('tmp_data')
data_folder.mkdir(exist_ok=True)
for field in fields:
    new_name=str.replace(field,'/','')
    new_path=data_folder / new_name
    new_path.mkdir(exist_ok=True)
    df2=df[df[df.columns[0]]==field]
    df2.to_excel(new_path/'production_data.xlsx',index=False)
!ec

__Question:__ Use one or several functions to achieve the same as the block of code above does. Comment on your choice.

!bc pycod
#answer
!ec

<% ex_id += 1 %>
======= Exercise ${ex_id}: lambda functions  =======
Rewrite the following functions, using Pythons `lambda` function
!bc pycod
def remove_space(x):
    return x.strip()
!ec

!bc pycod
def upper_case(x):
    return x.upper()
!ec

!bc pycod
#answer
!ec

<% ex_id += 1 %>
======= Exercise ${ex_id}: Assert your code  =======
Create two assert tests for `remove_space` and `upper_case` defined in the previous exercise.

!bc pycod
#answer
!ec

<% ex_id += 1 %>
======= Exercise ${ex_id}: A simple class  =======

__Question1:__ Take a look at the following class, and explain what each line does, by adding comments behind each line.
!bc pycod

class DeclineCurve:
    def __init__(self,q,tau):
        self.q=q 
        self.tau=tau
    
    def f(self,t):
        return self.q*np.exp(-t/self.tau)

!ec

__Question2:__ Add a function to the class, named `plot()`, such that the following code produce the output in figure ref{fig:p1:dec}. (To create a suitable list of `t` values you can do `t=np.linspace(0,10,1000)`, or more general `t=np.linspace(0,10*self.tau,1000)`)

!bc pycod
A=DeclineCurve(1,1)
A.plot()
!ec

FIGURE: [fig-project1/decline.png, width=400 frac=1.0] An exponential decline curve. label{fig:p1:dec}


<% ex_id += 1 %>
======= Exercise ${ex_id}: A more comprehensive class  =======
Inspect the following class
!bc pycod
class ProdData:
    """
    A class to extract production data from FactPages
    """
    def __init__(self):
        self.df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
    
    def get_data(self,field):
        """
        Extracts data for a specific field
        """
        df= self.df_prod[(self.df_prod['Field (Discovery)'] == field)]
        return df   
!ec
Add the following functions to the class:
o `write_data(field)` write data for a single field to an Excel file
o `write_all_data()` write an Excel file for each field
o A function to plot production data for a field

__The following is optional:__
o Add some checking to the functions, this could be a sensible error message if e.g. the file `../data/field_production_gross_monthly.xlsx` does not exists or that it is not possible to write data to file.
o Add some unit tests using assert, this could be to check that the oil produced for a certain year (and month) for a specific field is equal to a specific value.

<% ex_id += 1 %>
======= (OPTIONAL) Exercise ${ex_id}: The Dash library  =======
"The Dash library":"https://dash.plotly.com/" is one of the most popular libraries. Install it by doing
!bc sys
conda install dash
!ec
(If this fails, run `pip install dash`). Run the following code, which is copied from "a minimal dash app":"https://dash.plotly.com/minimal-app".
!bc pypro
from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder_unfiltered.csv')

app = Dash(__name__)

app.layout = html.Div([
    html.H1(children='Title of Dash App', style={'textAlign':'center'}),
    dcc.Dropdown(df.country.unique(), 'Canada', id='dropdown-selection'),
    dcc.Graph(id='graph-content')
])

@callback(
    Output('graph-content', 'figure'),
    Input('dropdown-selection', 'value')
)
def update_graph(value):
    dff = df[df.country==value]
    return px.line(dff, x='year', y='pop')

if __name__ == '__main__':
    app.run(debug=True)
!ec

__Question:__ Can you modify the code above to read and plot our data in `../data/field_production_gross_monthly.xlsx`? (Note: you can also download the production data directly by copying the correct address, by right-clicking on the Excel (or csv) tab "here":"https://factpages.sodir.no/en/field/TableView/Production/SumWellbores/Monthly".) 