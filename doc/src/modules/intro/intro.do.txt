# Here goes the main text.
# The text may be split into several files and included here
# via preprocess: # #include "file1.do.txt" etc

======= Introductory Remarks =======
The aim of this course is to start with practical applications and gradually move to basic operations. We choose a top-down approach, because we hope it will be more engaging. Thus, we will start with some advanced features and move to basic programming concepts. What we want to do is to get some useful applications up and running fast, and then investigate from a programming perspective what is going on.

This has the consequence that we will introduce basic programming concepts such as types, lists, dictionaries *when it is needed, and only the minimal amount of information*. The challenge with this approach is that there is always more to learn about the basic programming concepts, thus if you feel that you would like to know more about the different concepts you should explore this on your own. See the next section for where to find resources.

======= Online programming resources =======
This course is supposed to be self contained, but there are of course plenty of online courses, youtube videos, and books that you should take advantage of to improve your understanding. These resources are extremely valuable if you know exactly what your are looking for. As a complete beginner with little or no knowledge of Python it can be confusing if you do not know what you are looking for. Great online sources that cover much of Python basics are "w3schools":"https://www.w3schools.com/python/default.asp", and "A Whirlwind tour of Python":"https://jakevdp.github.io/WhirlwindTourOfPython/". These resources explains quite briefly important concepts and give examples, such as
* specific Python syntax
* data types (float, int, Boolean, etc.)
* data structures (lists, dictionaries, tuples, etc.)
* control flow (if, else, while, for loops etc.)
* functions and classes

# #ifdef PRELIM
When it comes to the vast number of libraries in Python it becomes much harder to master them, because it is so easy to just google ''How can I do this or that in Python''. What happens is that you quickly end up at "Stack Overflow":"https://stackoverflow.com/", where it is usually plenty of suggestions on how to solve your problem. suggest that this can be achieved by using their favorite library. My experience is that coded suggested by others can be unnecessary complicated, and what is maybe more important is that you want over time to develop your own personalized style. As a general rule of thumb, you should try to limit yourself to a limited number of libraries, and for basic operations use vanilla Python (i.e. Python without libraries).
# #endif

======= Stuff you need to do =======

o You need to install Python, even if you have installed Python before we recommend you to install the "Anaconda distribution":"https://www.anaconda.com/download". It is straight forward to install, just follow the instructions and choose default options that are suggested.
o Install an integrated development environment (IDE). An IDE is simply where you write the Python code. After installing Anaconda you should already have Spyder installed, if not you can install it by opening the Anaconda Navigator. You will find the Anaconda Navigator in the start menu in the Anaconda folder, but most likely there will already be a program called Spyder in your program folder. Another IDE is "Visual Studio Code":"https://code.visualstudio.com/" or VS Code for short, see figure ref{fig:intro:ide} for two examples. An IDE will help you to write code, because it will give information about the code you write and also help you to find errors.

FIGURE: [fig-intro/string_ex.png, width=400 frac=1.0] Two IDEs to write Python code (left) Spyder (right) VS Code. label{fig:intro:ide}

======= Concepts you should know before the course starts =======

Here we have collected stuff that will make your life easier, and increase the speed of understanding. We have tried to explain some concepts below, if this is too little information there are plenty of online resources that you can check out. The purpose of this section is to introduce you to some concepts that are key to any programming language, but can take some time to master or to get under your skin. If you understand these concepts, coding will be easier. Do not focus on how we use these concepts in coding, that is what the course is all about, rather try to understand the meaning of the concepts. 

===== Variable =====
I think of a variable as a box with a label.
!bc pypro
x=13
y='Dog'
!ec
In the examples above we have two variables `x` and `y`, we have assigned the value 13 and the string `Dog` to them, respectively. The value 13 (or the string `Dog`) is stored somewhere in the computer memory, we can think of this piece of memory as a box with a label, as illustrated in figure ref{fig:intro:var}.

FIGURE: [fig-intro/box.png, width=400 frac=1.0] A visualization of a variable. label{fig:intro:var}

The illustration in figure ref{fig:intro:var} also indicate that the size of the box may vary dependent on the content. Note that `x` and `y` are labels, it does not matter what kind of label we use, it is the content of the box that is important not the label you put on it. Normally you would use a more descriptive name than `x` or `y` to simply help other humans to better understand your code.

===== Function =====

A function is several lines of code that perform a specific task. We can think of a function as a recipe, e.g. a cake recipe. To make a cake we need a certain input, eggs, flour, sugar, chocolate, then we follow a specific set of operations to produce the cake. A function in Python operates in the same way, it takes something as input (different variables), follow certain steps and returns a product (the cake).

Functions are useful because it allows us to wrap several lines of code that we believe we will use many timed into reusable functions. Thus, we write the function (recipe) once and every time we want to make the same cake, we invoke the function to produce the output (cake).

===== Object =====

In Python everything is an object. An object is a variable (a box) that contains data and functions. That means that the boxes in figure ref{fig:intro:var} is more than just  pieces of memory. To continue the with the recipe example above, we can think of an object as a cookbook that also contains ingredients. There will be many recipes in this cookbook and many ingredients. In Python the syntax for accessing the functions (recipes) or data (ingredients) is by using the `.` syntax. In figure ref{fig:intro:ide}, this is illustrated. When we write `x='This is a string'`, we can e.g. do `x.capitalize()`, which will (not surprisingly) transform all the small letters to capital letters, `'THIS IS A STRING'`.

Thus in Python there will be a lot of ready made functions that you can use to quickly perform simple operations on your variables.

===== Library =====

Python has a lot of libraries, which is one of the reasons why Python is so popular. These libraries are free and you can import them into your code. You can think of a library as a collection of cookbooks (unsurprisingly). A Python library consists of a collection of objects, functions and or variables. 
