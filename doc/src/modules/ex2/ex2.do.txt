# Here goes the main text.
# The text may be split into several files and included here
# via preprocess: # #include "file1.do.txt" etc

<% ex_id = 0 %>
<% ex_id += 1 %>
======= Exercise ${ex_id}: Create a function for extracting data =======

__Question:__ Create a function from the following code. The function should take as argument the field name and return a DataFrame with field data. Include a docstring in the function. 

!bc pycod
df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
df=df_prod[df_prod['Field (Discovery)'] == 'DRAUGEN']
!ec

!split
__Solution:__

!bc pycod
def get_data(field):
        """
        Extracts data for a specific field
        """
	df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
        df= df_prod[df_prod['Field (Discovery)'] == field]
        return df

# example of use
df=get_data('DRAUGEN')
!ec

!split
<% ex_id += 1 %>
======= Exercise ${ex_id}: Improve the previous function =======
To check if a DataFrame, `df`,  contains any data, we can use `df.empty`. If `df.empty` is `True`, there are no data in the DataFrame.

__Question:__ Extend the previous function, by using `df.empty` to give a message if no data are available for a field.

!split
__Solution:__

!bc pycod
def get_data(field):
        """
        Extracts data for a specific field
        """
	df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
        df= df_prod[df_prod['Field (Discovery)'] == field]
	if df.empty:
	   print('No data for ', field)
        return df

# example of use
df=get_data('draugen')
!ec

!split
<% ex_id += 1 %>
======= Exercise ${ex_id}: More improvements =======

__Question:__ Extend the previous function such that it is case insensitive, i.e. that `get_data('draugen')` would actually return data.


!split
__Solution:__

!bc pycod
def get_data(field):
        """
        Extracts data for a specific field
        """
	df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
	field = field.upper()
        df= df_prod[df_prod['Field (Discovery)'] == field]
	if df.empty:
	   print('No data for ', field)
        return df

# example of use
df=get_data('draugen')
!ec

!split
<% ex_id += 1 %>
======= Exercise ${ex_id}: Increase speed  =======

The previous function is a bit slow, because for each field we read the big Excel file `field_production_gross_monthly.xlsx` each time. It is much better to read it only once.

__Question:__ Read the data outside the function and pass the production DataFrame, using a default argument.

!split
__Solution:__

Variables defined outside a function in Python is considered as global, thus you do not send them as argument, but it is generally considered bad coding practice to use global variables, hence

!bc pycod
df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')

def get_data(field,df_prod=df_prod):
        """
        Extracts data for a specific field
        """
	field = field.upper()
        df= df_prod[df_prod['Field (Discovery)'] == field]
	if df.empty:
	   print('No data for ', field)
        return df
!ec

!bc pycod
# example of use
df=get_data('draugen')
df2=get_data('ekofisk')
!ec

!split
<% ex_id += 1 %>
======= Exercise ${ex_id}: Encapsulate in a class  =======
In the previous exercise we had to use a global variable `df_prod` and then pass it to our function. In many cases it might be much easier to use a class.

__Question:__ Create a class:
o where the `__init__` function reads in the data
o and add a class function that returns data for a given field

!split
__Solution:__

!bc pycod
class ProdData:
    """
    A class to extract production data from FactPages
    """
    def __init__(self):
    	self.df_prod=pd.read_excel('../data/field_production_gross_monthly.xlsx')
    
       def get_data(self,field):
        """
        Extracts data for a specific field
        """
        field=field.upper()
        df= self.df_prod[(self.df_prod['Field (Discovery)'] == field)]
        if df.empty:
             print('No data for ', field)
        return df
ff=ProdData()
!ec
Note that the class contains all the data, we do not have to use a global variable
!bc pycod
#example of use
df=ff.get_data('draugen')
df2=ff.get_data('ekofisk')
!ec